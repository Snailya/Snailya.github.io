<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ReactiveUI on Snailya虾啵啵</title>
    <link>https://snailya.github.io/categories/reactiveui/</link>
    <description>Recent content in ReactiveUI on Snailya虾啵啵</description>
    <image>
      <title>Snailya虾啵啵</title>
      <url>https://snailya.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://snailya.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Jan 2024 14:36:16 +0800</lastBuildDate>
    <atom:link href="https://snailya.github.io/categories/reactiveui/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ReactiveUI ViewModel Properties总结</title>
      <link>https://snailya.github.io/posts/reactiveui-viewmodel-properties%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 11 Jan 2024 14:36:16 +0800</pubDate>
      <guid>https://snailya.github.io/posts/reactiveui-viewmodel-properties%E6%80%BB%E7%BB%93/</guid>
      <description>属性类型 在ReactiveUI中，ViewModel中的属性可以根据其用途划分为三种情况：读写属性（Read-Write Properties）、只读属性（Read-Only Properties）和输出属性（Output Properties）。
读写属性 (Read-Write Properties):
读写属性是可以被服务修改，也可以被用户在View中修改的属性。这类属性是我们通常比较熟悉的普通属性。
例如，用户的姓名可能是被服务加载的，而在加载之后又被用户修改。
只读属性 (Read-Only Properties):
只读属性是在构造函数中被初始化且在之后不再变化的属性。
例如， 用户的ID在一般情况下时不允许变化的。
输出属性 (Output Properties):
输出属性是ReactiveUI中新提出的概念，初次接触ReactiveUI时，可能会将输出属性与只读属性混为一谈。尽管输出属性对于用户而言是只读的，但是对于属性本身是可变的。这类属性通常由Observable变化而成，表示属性值可能随时间变化。 例如，用户负债率随用户的总资产和总负债变化，但负债率属性本身是不允许被用户修改的。
在ReactiveUI中，使用这三种属性类型可以更清晰地表示属性的特性和用途。读写属性用于需要双向绑定的数据，只读属性用于一次性初始化后不再改变的数据，而输出属性用于表示可能随时间变化的数据流。这种划分有助于更好地理解和管理ViewModel中的属性。
属性的声明与绑定方法 在明确了属性类型的基础上，ViewModel中所有非集合类型的属性都可以按照下面固定的方式进行声明与绑定。
读写属性的声明需要调用ReactiveObject的RaiseAndSetIfChanged方法，该方法实现了INotifydPropertyChanged。
private string name; public string Name { get =&amp;gt; name; set =&amp;gt; this.RaiseAndSetIfChanged(ref name, value); } 读写属性的绑定使用TView的Bind方法进行双向绑定。
this.WhenActivated(disposable =&amp;gt; { this.Bind(ViewModel, vm =&amp;gt; vm.Name, v =&amp;gt; v.NameTextBox.Text) .DisposeWith(disposable); }); 只读属性使用一般的声明方式即可。
public int Id {get;} 绑定时，使用单向绑定。
this.WhenActivated(disposable =&amp;gt; { this.OneWayBind(ViewModel, vm =&amp;gt; vm.Id, v =&amp;gt; v.IdTextBlock.Text) .</description>
    </item>
  </channel>
</rss>
